import { Worker, isMainThread, parentPort } from "worker_threads";
import { calculateCreate2 } from "eth-create2-calculator";
import { ethers } from "ethers";
import { writeFileSync, appendFileSync } from "fs";

// Bytecode path
import { bytecode} from "../artifacts/contracts/Lock.sol/Lock.json"

// Constants
const FROM = "0x16A2DDa7E466aE460C5ADd1fBc64dfB8B96E11fb"; // Adjust this based on the address of the create2 deployer
const ADDRESS_REGEX = /^0x*caf/i; // Adjust this based on the pattern of the address you want to find
const WORKER_COUNT = 16; // Adjust this based on your CPU core count for optimal performance
const ITERATIONS_PER_WORKER = 1_000_000; // Number of random salts generated by each worker

if (isMainThread) {
  const startTime = new Date();
  console.log(`Started at: ${startTime}`);

  writeFileSync("salt.txt", "");

  const startNextWorker = (workerIndex: number) => {
    const worker = new Worker(__filename);
    worker.postMessage({
      FROM,
      bytecode,
      ADDRESS_REGEX,
      iterations: ITERATIONS_PER_WORKER,
    });

    worker.on("message", (message) => {
      if (message.found) {
        appendFileSync("salt.txt", `${message.salt}: ${message.calculatedAddress}\n`); 
        console.log(
          `Salt found: ${message.salt} with address: ${message.calculatedAddress}`
        );
      } else {
        console.log(
          `Worker finished iterations for worker ${workerIndex}`
        );
        startNextWorker(workerIndex);
      }
    });
  };

  for (let i = 0; i < WORKER_COUNT; i++) {
    startNextWorker(i);
  }
} else {
  parentPort!.on("message", (message) => {
    const { FROM, bytecode, ADDRESS_REGEX, iterations } = message;

    let salt: string;
    let calculatedAddress: string;

    for (let i = 0; i < iterations; i++) {
      salt = ethers.hexlify(ethers.randomBytes(32));
      calculatedAddress = ethers.getAddress(calculateCreate2(ethers.getAddress(FROM), salt, bytecode));

      if (ADDRESS_REGEX.test(calculatedAddress)) {
        parentPort!.postMessage({ found: true, salt, calculatedAddress });
      }
    }

    parentPort!.postMessage({ found: false });
  });
}
